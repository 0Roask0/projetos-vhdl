library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity traba_2_vlsi_top is
    port(
        clock: in std_logic;
        reset_n: in std_logic;

        btn_n: in std_logic;
        led_n: out std_logic_vector(3 downto 0)

    );

end traba_2_vlsi_top;

architecture traba_2_vlsi_top of traba_2_vlsi_top is

    signal btn_n_sync: std_logic;
    signal reset: std_logic;

    signal btn1_sync: std_logic;
    signal btn2_sync: std_logic;
    signal btn3_sync: std_logic;

    signal led: std_logic_vector(3 downto 0);

    signal btn1_deb : std_logic;
    signal btn2_deb : std_logic;
    signal btn3_deb : std_logic;

    signal buzzer_en : std_logic;
    signal ver : std_logic;

    signal cnt : std_logic_vector(15 downto 0);
    signal div : std_logic_vector(20 downto 0);
    signal reset : std_logic;
	signal ir_sync : std_logic;
	signal intr : std_logic;
	signal led : std_logic_vector(3 downto 0);
	signal dig : std_logic_vector(3 downto 0);
	signal command : std_logic_vector(7 downto 0);
	signal acionou : std_logic;
begin
	reset <= not reset_n;
	led_n <= not led;
	process(clock, reset)
	begin
		if(reset = '1') then
			led <= (others => '0');
		elsif(rising_edge(clock)) then
			if(intr = '1') then
				led <= dig;
			end if;
		end if;
	end process;

	process(command)
	begin
		case command is
			when x"68" => dig <= "0001";
			when x"30" => dig <= "0010";
			when x"18" => dig <= "0011";
			when x"7A" => dig <= "0100";
			when x"10" => dig <= "0101";
			when x"38" => dig <= "0110";
			when x"5A" => dig <= "0111";
			when x"42" => dig <= "1000";
			when x"4A" => dig <= "1001";
			when x"52" => dig <= "1010";
			when x"C2" => dig <= "1111";
			when others => dig <= (others => '1');
		end case;
	

		if dig = "1111" then
			case command is
				when x"68" => dig <= "0001";
				when x"30" => dig <= "0010";
				when x"18" => dig <= "0011";
				when x"7A" => dig <= "0100";
				when x"10" => dig <= "0101";
				when x"38" => dig <= "0110";
				when x"5A" => dig <= "0111";
				when x"42" => dig <= "1000";
				when x"4A" => dig <= "1001";
				when x"52" => dig <= "1010";
				when x"C2" => dig <= "1111";
				when others => dig <= (others => '0');
			end case;
		end if;

		if command = X"C2" then
			buzz_en <= '1';
			acionou <= '1';
		elsif command = X"C2" and acionou = '1' then
			buzz_en <= '1';
            acionou <= '0';
		end if;

		if commmand = X"E0" then
			dig <= dig - '1';
		elsif command = X"A8" then
			dig <= dig + '1';
		end if;

	end process;

begin 
    process(cnt)
    begin
        case cnt is 
        when "0000" => div <= "100110001001011010000"
        when "0001" => div <= "11110100001001000000"
        when "0010" => div <= "11011011101110100000"
        when "0011" => div <= "11000011010100000000"
        when "0100" => div <= "10101010111001100000"
        when "0101" => div <= "10010010011111000000"
        when "0110" => div <= "01111010000100100000"
        when "0111" => div <= "01100001101010000000"
        when "1000" => div <= "01001001001111100000"
        when "1001" => div <= "00110000110101000000"
        when "1010" => div <= "00011000011010100000"
        when "1011" => div <= "00001100001101010000"
        when "1100" => div <= "00000110000110101000"
        when "1101" => div <= "00000010011100010000"
        when "1110" => div <= "00000001001110001000"   
        when "1111" => div <= "00000000010011100010" 
    end case;


    traba_2_vlsi : entity work.traba_2_vlsi
    port map(
        clock => clock,
        reset => reset,
        btn => btn_deb,
        led => led
    );

    buzzer : entity work.buzzer
    port map(
        clock => clock,
        reset => reset,
        en => buzzer_en,
        buzz => buzzer_o,
        in_div => div
    );

    synchro_ir : entity work.synchro
	port map(
		clock => clock,
		async_i	=> ir,
		sync_o => ir_sync
	);

	ir_driver : entity work.ir
	port map(
		clock => clock,
		reset	=> reset,
		ir	=> ir_sync,
		intr => intr,
		command => command
	);
end architecture;
